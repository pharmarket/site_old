<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-20 at 20:22:53.
 */
define("WEB_ROOT", "C:/wamp/www/exomvc/src/Public/");
define("LINK_ROOT", str_replace("Public/index.php", "", $_SERVER["SCRIPT_NAME"]));
define("APP_ROOT", "C:/wamp/www/exomvc/src/Application/");
include_once("C:/wamp/www/exomvc/src/Library/Controller/iController.php");
include_once("C:/wamp/www/exomvc/src/Library/Controller/Controller.php");

class PHPUnitUtil{

  public static function callMethod($obj, $name, array $args) {
        $class = new \ReflectionClass($obj);
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        return $method->invokeArgs($obj, $args);
    }
}

class ControllerTest extends PHPUnit_Framework_TestCase{
    /**
     * @var Controller
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');
    }

    public function testResponseHeader(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $possibility = [
                            "txt"  => "text/plain",
                            "html" => "text/html",
                            "css"  => "text/css",
                            "js"   => "application/javascript",
                            "json" => "application/json",
                            "xml"  => "application/xml"];

        foreach ($possibility as $key => $value) {
            //Test du seter avec les valeurs possibles
            $this->assertTrue(PHPUnitUtil::callMethod($this->object, 'setResponseHeader', [$key]));

            //Puis verification avec le get, si tout à bien fonctionné.
            $this->assertEquals($value, PHPUnitUtil::callMethod($this->object, 'getResponseHeader', []));
        }
    }

    public function testLayout(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $layouts = ["default", "user"];

        foreach ($layouts as $value) {
            //Test du seter avec les valeurs possible
            $this->assertTrue(PHPUnitUtil::callMethod($this->object, 'setLayout', [$value]));
            
            //Puis verification avec le get, si tout à bien fonctionné.
            $this->assertEquals($value, PHPUnitUtil::callMethod($this->object, 'getLayout', []));
        }
    }

    public function testScript(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $script = [
                    "jquery.flexslider-min",
                    "index_index"
                ];

        foreach ($script as $key => $value) {
            //Test du seter avec les valeurs possible
            $this->assertTrue(PHPUnitUtil::callMethod($this->object, 'addScript', [$value]));
        }

        //Puis verification avec le get, si tout à bien fonctionné.
        $this->assertEquals($script, PHPUnitUtil::callMethod($this->object, 'getScript', []));
    }

    public function testStyle(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $script = ["flexslider"];

        foreach ($script as $key => $value) {
            //Test du seter avec les valeurs possible
            $this->assertTrue(PHPUnitUtil::callMethod($this->object, 'addStyle', [$value]));
        }

        //Puis verification avec le get, si tout à bien fonctionné.
        $this->assertEquals($script, PHPUnitUtil::callMethod($this->object, 'getStyle', []));
    }

    public function testDataView(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $dataView = ["erreur" => "erreur", "pageTitle" => "Inscription"];

        PHPUnitUtil::callMethod($this->object, 'setDataView', [$dataView]);

        //Puis verification avec le get, si tout à bien fonctionné.
        $this->assertEquals(array_merge($dataView, ["siteName" => "PokeBlog"]), PHPUnitUtil::callMethod($this->object, 'getDataView', []));
    }

    public function testDataMod(){
        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $dataMod = ["modLastNewsTitle"=> "Last News", "lastNews" => "Une news"];

        PHPUnitUtil::callMethod($this->object, 'setDataMod', [$dataMod]);

        //Puis verification avec le get, si tout à bien fonctionné.
        $this->assertEquals($dataMod, PHPUnitUtil::callMethod($this->object, 'getDataMod', []));
    }

    public function testAddFilesRender(){

        $this->object =$this->getMockForAbstractClass('\Library\Controller\Controller');

        $script = [
                    "jquery.flexslider-min",
                    "index_index"
                ];

        foreach ($script as $key => $value) {
            //Test du seter avec les valeurs possibles
            $this->assertTrue(PHPUnitUtil::callMethod($this->object, 'addScript', [$value]));
        }

        $script = ["flexslider"];

        foreach ($script as $key => $value) {
            //Teste le seter avec les valeurs possibles
            $this->assertTrue(PHPUnitUtil::callMethod($this->object, 'addStyle', [$value]));
        }

        $html ="<head></head><body></body>";

        $result = "<head><link href= '" . WEB_ROOT . "css/flexslider.css' rel = 'stylesheet' type = 'text/css'/></head><body><script src= '" . WEB_ROOT . "js/jquery.flexslider-min.js'></script><script src= '" . WEB_ROOT . "js/index_index.js'></script></body>";

        PHPUnitUtil::callMethod($this->object, 'addFilesRender', [&$html]);

        $this->assertEquals($result, $html);
    }
}
